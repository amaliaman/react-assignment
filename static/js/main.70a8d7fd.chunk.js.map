{"version":3,"sources":["constants/strings.js","utils/AjaxUtils.js","constants/env.js","utils/GoogleApiUtils.js","utils/JsUtils.js","stores/CustomersStore.js","components/customerPicker/ListColumn.js","constants/dimensions.js","components/maps/MapContainer.js","components/customerPicker/CustomerPicker.js","components/pages/Landing.js","App.js","index.js"],"names":["MAP_ERROR","HTTP_METHODS","TITLES","ajaxUtils","queryApi","_callee","method","url","body","response","regenerator_default","a","wrap","_context","prev","next","t0","axios","get","sent","abrupt","post","put","delete","Error","concat","data","t1","stop","this","API_KEY","googleApiUtils","geocodeAddress","address","env","jsUtils","sortStrings","x","y","customersStore","CustomersStore","_this","Object","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","getGeocode","reaction","currentAddress","_ref","asyncToGenerator","mark","mapErrorMessage","status","currentLocation","results","geometry","location","fetchedAddress","formatted_address","strings","_x","apply","arguments","loadCustomers","setDefaults","customers","reduce","acc","curr","findIndex","c","country","Country","push","cities","City","find","includes","e","sort","b","numeric","length","countriesWithCities","map","_this2","selectedCountry","city","companies","filter","cust","id","Id","company","CompanyName","citiesByCountryWithCompanies","_this3","selectedCity","_this4","selectedCompanyId","customer","Address","observable","computed","action","_this5","clients","Customers","_this6","allCountries","citiesByCountry","companiesByCity","_this7","_this8","_this9","ListItem","props","react_default","createElement","onClick","handleClick","className","cssClass","label","ListColumn","_this$props","isCompany","selectedItem","selectItem","title","value","ListColumn_ListItem","key","Component","mapStyles","width","height","defaultLocation","lat","lng","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","setState","onClose","error","react","dim","isVisible","dist","google","zoom","style","center","visible","position","GoogleApiWrapper","apiKey","CustomerPicker","inject","stores","_stores$store","store","selectCountry","selectCity","selectCompany","observer","customerPicker_ListColumn","maps_MapContainer","Landing","customerPicker_CustomerPicker","App","pages_Landing","ReactDOM","render","index_module","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.70a8d7fd.chunk.js","sourcesContent":["export const MAP_ERROR = 'Couldn\\'t locate the following address: ';\r\n\r\nexport const HTTP_METHODS = {\r\n    get: 'GET',\r\n    put: 'PUT',\r\n    post: 'POST',\r\n    delete: 'DELETE'\r\n};\r\n\r\nexport const TITLES = {\r\n    countries: 'Countries',\r\n    cities: 'Cities',\r\n    company: 'Company',\r\n    map: 'Map'\r\n};\r\n\r\nexport const AJAX_ERROR = 'Unexpected method: ';","import axios from 'axios';\r\n\r\nimport { HTTP_METHODS, AJAX_ERROR } from '../constants/strings';\r\n\r\nclass AjaxUtils {\r\n    /**\r\n     * Handle ajax calls centrally\r\n     * @param {String} method The chosen HTTP method\r\n     * @param {String} url The url to request\r\n     * @param {Object} body The body of the request, optional\r\n     */\r\n    queryApi = async (method, url, body) => {\r\n        let response;\r\n        try {\r\n            switch (method) {\r\n                case HTTP_METHODS.get:\r\n                    response = await axios.get(url);\r\n                    break;\r\n                case HTTP_METHODS.post:\r\n                    response = await axios.post(url, body);\r\n                    break;\r\n                case HTTP_METHODS.put:\r\n                    response = await axios.put(url, body);\r\n                    break;\r\n                case HTTP_METHODS.delete:\r\n                    response = await axios.delete(url);\r\n                    break;\r\n                default:\r\n                    throw new Error(`${AJAX_ERROR}${method}`);\r\n            }\r\n            return response.data;\r\n        }\r\n        catch (error) { throw error; }\r\n    };\r\n}\r\n\r\nconst ajaxUtils = new AjaxUtils();\r\nexport default ajaxUtils;","export const API_KEY = 'AIzaSyBDgy2yW_NWIkjA9IkIx2Z1VpSu8AUSGV0';\r\nexport const API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\r\nexport const QS_PARAM_ADDRESS = 'address';\r\nexport const QS_PARAM_KEY = 'key';","import ajaxUtils from './AjaxUtils';\r\nimport { HTTP_METHODS } from '../constants/strings';\r\nimport * as env from '../constants/env';\r\n\r\nclass GoogleApiUtils {\r\n    /**\r\n     * Make ajax call to geocoding service\r\n     * @param {String} address The address to geocode\r\n     */\r\n    geocodeAddress = address => {\r\n        const url = `${env.API_URL}?${env.QS_PARAM_ADDRESS}=${address}&${env.QS_PARAM_KEY}=${env.API_KEY}`;\r\n        return ajaxUtils.queryApi(HTTP_METHODS.get, url);\r\n    };\r\n}\r\n\r\nconst googleApiUtils = new GoogleApiUtils();\r\nexport default googleApiUtils;","class JsUtils {\r\n    /** Sort alphabetically */\r\n    sortStrings = (x, y) => {\r\n        if (x < y) { return -1; }\r\n        if (x > y) { return 1; }\r\n        return 0;\r\n    };\r\n}\r\n\r\nconst jsUtils = new JsUtils();\r\nexport default jsUtils;","import { observable, action, computed, reaction } from 'mobx';\r\n\r\nimport clients from '../data/clients.json';\r\nimport googleApiUtils from '../utils/GoogleApiUtils';\r\nimport * as strings from '../constants/strings';\r\nimport jsUtils from '../utils/JsUtils';\r\n\r\nclass CustomersStore {\r\n    /** The original customers array from the external file */\r\n    @observable customers = [];\r\n\r\n    /** The currently selected country */\r\n    @observable selectedCountry = '';\r\n\r\n    /** The currently selected city */\r\n    @observable selectedCity = '';\r\n\r\n    /** The currently selected company's id */\r\n    @observable selectedCompanyId = '';\r\n\r\n    /** The currently selected company's coordinates, retrieved from geocoding service */\r\n    @observable currentLocation = null;\r\n\r\n    /** The currently selected company's address, retrieved from geocoding service */\r\n    @observable fetchedAddress = '';\r\n\r\n    /** An error message in case the address was not found in the map */\r\n    @observable mapErrorMessage = '';\r\n\r\n    constructor() {\r\n        this.loadCustomers();\r\n        this.setDefaults();\r\n    }\r\n\r\n    // ------------------------------------------------------------\r\n    // Computed values\r\n    // ------------------------------------------------------------\r\n\r\n    /** Return an array of countries and their cities, ordered by number of cities */\r\n    @computed get countriesWithCities() {\r\n        const countriesWithCities = this.customers\r\n            .reduce((acc, curr) => {\r\n                if (acc.findIndex(c => c.country === curr.Country) === -1) {\r\n                    acc.push({ country: curr.Country, cities: [curr.City] });\r\n                }\r\n                else if (!acc.find(c => c.country === curr.Country).cities.includes(curr.City)) {\r\n                    acc.find(e => e.country === curr.Country).cities.push(curr.City);\r\n                }\r\n                return acc;\r\n            }, [])\r\n            .sort((a, b) => {\r\n                const numeric = b.cities.length - a.cities.length;\r\n                if (numeric !== 0) {\r\n                    return numeric;\r\n                }\r\n                return jsUtils.sortStrings(a.country, b.country);\r\n            });\r\n        return countriesWithCities;\r\n    }\r\n\r\n    /** Return an array of all country names */\r\n    @computed get allCountries() {\r\n        return this.countriesWithCities\r\n            .map(c => c.country);\r\n    }\r\n\r\n    /** \r\n     * Return an array of cities and their companies, ordered by number of companies,\r\n     * whenever a new country is chosen\r\n     */\r\n    @computed get citiesByCountryWithCompanies() {\r\n        const citiesByCountryWithCompanies = this.selectedCountry &&\r\n            this.countriesWithCities\r\n                .find(country => country.country === this.selectedCountry)\r\n                .cities\r\n                .map(city => ({\r\n                    city: city,\r\n                    companies: this.customers\r\n                        .filter(cust => cust.City === city)\r\n                        .map(cust => ({ id: cust.Id, company: cust.CompanyName }))\r\n                }))\r\n                .sort((a, b) => {\r\n                    const numeric = b.companies.length - a.companies.length;\r\n                    if (numeric !== 0) {\r\n                        return numeric;\r\n                    }\r\n                    return jsUtils.sortStrings(a.city, b.city);\r\n                });\r\n        return citiesByCountryWithCompanies;\r\n    }\r\n\r\n    /** Return an array of city names matching current country*/\r\n    @computed get citiesByCountry() {\r\n        return this.citiesByCountryWithCompanies &&\r\n            this.citiesByCountryWithCompanies\r\n                .map(c => c.city);\r\n    }\r\n\r\n    /**\r\n     * Return an array of company name & ids, ordered alphabetically,\r\n     * whenever a new city is chosen\r\n     */\r\n    @computed get companiesByCity() {\r\n        return this.selectedCity &&\r\n            this.citiesByCountryWithCompanies\r\n                .find(c => c.city === this.selectedCity)\r\n                .companies\r\n                .sort((a, b) => jsUtils.sortStrings(a.company, b.company));\r\n    }\r\n\r\n    /** Return the full address of the current company */\r\n    @computed get currentAddress() {\r\n        if (this.selectedCompanyId) {\r\n            const customer = this.customers.find(c => c.Id === this.selectedCompanyId);\r\n            const address = `${customer.Address}, ${customer.City}, ${customer.Country}`;\r\n            return address;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // ------------------------------------------------------------\r\n    // Actions\r\n    // ------------------------------------------------------------\r\n\r\n    /** Load all customers from external file */\r\n    @action loadCustomers = () => {\r\n        this.customers = clients.Customers;\r\n    };\r\n\r\n    /** Set the initial selected values */\r\n    @action setDefaults = () => {\r\n        if (this.selectedCountry === '') {\r\n            this.selectedCountry = this.allCountries[0];\r\n            this.selectedCity = this.citiesByCountry[0];\r\n            this.selectedCompanyId = this.companiesByCity[0].id;\r\n        }\r\n    };\r\n\r\n    /** Select a country */\r\n    @action selectCountry = country => {\r\n        this.selectedCountry = country;\r\n        this.selectedCity = '';\r\n        this.selectedCompanyId = '';\r\n    };\r\n\r\n    /** Select a city */\r\n    @action selectCity = city => {\r\n        this.selectedCity = city;\r\n        this.selectedCompanyId = '';\r\n    };\r\n\r\n    /** Select a company */\r\n    @action selectCompany = id => {\r\n        this.selectedCompanyId = id;\r\n    };\r\n\r\n    // ------------------------------------------------------------\r\n    // Reactions - side effects\r\n    // ------------------------------------------------------------\r\n\r\n    /** \r\n     * Make an ajax call to geocoding service whenever the current address \r\n     * changes, and get location object (coordinates) \r\n     */\r\n    getGeocode = reaction(\r\n        () => this.currentAddress,\r\n        async address => {\r\n            this.mapErrorMessage = '';\r\n            if (address) {\r\n                const response = await googleApiUtils.geocodeAddress(address);\r\n                if (response.status === 'OK') {\r\n                    this.currentLocation = response.results[0].geometry.location;\r\n                    this.fetchedAddress = response.results[0].formatted_address;\r\n                }\r\n                else {\r\n                    this.mapErrorMessage = `${strings.MAP_ERROR}${this.currentAddress}.`;\r\n                }\r\n            }\r\n            else {\r\n                this.currentLocation = null;\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nconst customersStore = new CustomersStore();\r\nexport default customersStore;","import React, { Component } from 'react';\r\n\r\nconst ListItem = props => (\r\n    <div onClick={props.handleClick} className={props.cssClass}>\r\n        {props.label}\r\n    </div>\r\n);\r\n\r\nclass ListColumn extends Component {\r\n    render() {\r\n        const { data, isCompany, selectedItem, selectItem } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className='title'>{this.props.title}</div>\r\n                <div className='list'>\r\n                    {data && data.map(c => {\r\n                        const value = isCompany ? c.id : c;\r\n                        return (\r\n                            <ListItem\r\n                                key={value}\r\n                                label={isCompany ? c.company : c}\r\n                                handleClick={() => selectItem(value)}\r\n                                cssClass={selectedItem === value ? 'selected' : null}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListColumn;","export const mapStyles = {\r\n    width: '415px',\r\n    height: '260px'\r\n};\r\n\r\nexport const initialZoom = 17;\r\n\r\nexport const defaultLocation = { lat: 0, lng: 0 };","import React, { Component, Fragment } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\r\n\r\nimport { API_KEY } from '../../constants/env';\r\nimport * as dim from '../../constants/dimensions';\r\n\r\nclass MapContainer extends Component {\r\n    state = {\r\n        showingInfoWindow: false,\r\n        activeMarker: {},\r\n        selectedPlace: {}\r\n    };\r\n\r\n    onMarkerClick = (props, marker, e) =>\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n        });\r\n\r\n    onClose = props => {\r\n        if (this.state.showingInfoWindow) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        // Show only error message (if there's one)\r\n        if (this.props.error) {\r\n            return (\r\n                <Fragment>\r\n                    <div className='title'>{this.props.title}</div>\r\n                    <div className='map-error'>{this.props.error}</div>\r\n                </Fragment>\r\n            )\r\n        }\r\n\r\n        // Show only map (if everything's OK)\r\n        const location = this.props.location ? this.props.location : dim.defaultLocation;\r\n        const isVisible = this.props.location ? true : false;\r\n\r\n        return (\r\n            <div className='map-container'>\r\n                <div className='title'>{this.props.title}</div>\r\n                <div className='map-wrapper'>\r\n                    <Map\r\n                        google={this.props.google}\r\n                        zoom={dim.initialZoom}\r\n                        style={dim.mapStyles}\r\n                        center={location}\r\n                        visible={isVisible}\r\n                    >\r\n                        <Marker\r\n                            onClick={this.onMarkerClick}\r\n                            position={location}\r\n                        />\r\n                        <InfoWindow\r\n                            marker={this.state.activeMarker}\r\n                            visible={this.state.showingInfoWindow}\r\n                            onClose={this.onClose}\r\n                        >\r\n                            <div>{this.props.address}</div>\r\n                        </InfoWindow>\r\n                    </Map>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: API_KEY\r\n})(MapContainer);","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport ListColumn from './ListColumn';\r\nimport MapContainer from '../maps/MapContainer';\r\nimport { TITLES } from '../../constants/strings';\r\n\r\n@inject(stores => {\r\n    const { allCountries, selectCountry, selectedCountry,\r\n        citiesByCountry, selectCity, selectedCity,\r\n        companiesByCity, selectCompany, selectedCompanyId,\r\n        fetchedAddress, currentLocation, mapErrorMessage } = stores.store;\r\n    return {\r\n        allCountries, selectCountry, selectedCountry,\r\n        citiesByCountry, selectCity, selectedCity,\r\n        companiesByCity, selectCompany, selectedCompanyId,\r\n        fetchedAddress, currentLocation, mapErrorMessage\r\n    };\r\n})\r\n@observer\r\nclass CustomerPicker extends Component {\r\n    render() {\r\n        return (\r\n            <div className='picker-container'>\r\n                <div className='columns-wrapper'>\r\n                    <ListColumn\r\n                        title={TITLES.countries}\r\n                        data={this.props.allCountries}\r\n                        selectItem={this.props.selectCountry}\r\n                        selectedItem={this.props.selectedCountry}\r\n                    />\r\n\r\n                    <ListColumn\r\n                        title={TITLES.cities}\r\n                        data={this.props.citiesByCountry}\r\n                        selectItem={this.props.selectCity}\r\n                        selectedItem={this.props.selectedCity}\r\n                    />\r\n\r\n                    <ListColumn\r\n                        title={TITLES.company}\r\n                        data={this.props.companiesByCity}\r\n                        selectItem={this.props.selectCompany}\r\n                        selectedItem={this.props.selectedCompanyId}\r\n                        isCompany={true}\r\n                    />\r\n                </div>\r\n\r\n                <MapContainer\r\n                    title={TITLES.map}\r\n                    location={this.props.currentLocation}\r\n                    address={this.props.fetchedAddress}\r\n                    error={this.props.mapErrorMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomerPicker;","import React, { Component } from 'react';\r\nimport CustomerPicker from '../customerPicker/CustomerPicker';\r\n\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CustomerPicker />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;","import React, { Component } from 'react';\r\nimport Landing from './components/pages/Landing';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Landing />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport './index.css';\nimport customersStore from './stores/CustomersStore';\nimport App from './App';\n\nReactDOM.render(<Provider store={customersStore}><App /></Provider>, document.getElementById('root'));"],"sourceRoot":""}